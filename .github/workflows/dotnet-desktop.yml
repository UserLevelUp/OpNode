name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug]  # ,Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: pWord4/pWord4/pWord4.sln
      Test_Project_Path: pWord4/pWord4/OpNodeTest2/OpNodeTest2.csproj
#      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
#      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

#    - name: Setup .NET Core
#      uses: actions/setup-dotnet@v3
#      with:
#        dotnet-version: 7.0.x

#    - name: Install .NET Frmework 8.0
#      uses: actions/setup-dotnet@v3
#      with:
#        dotnet-version: '8.0.100-rc.1.23463.5'  # Specify the exact version

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'
 
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2

    - name: List directory
      run: Get-ChildItem -Path . -Force

    - name: List files in OpNodeTest2 directory
      run: Get-ChildItem -Path ./pWord4/pWord4/OpNodeTest2 -Force

    - name: Restore the application
      run: msbuild ${{ env.Solution_Name }} /t:Restore /p:Configuration=Debug

    #- name: Restore the application
    #  run: msbuild "D:\a\OpNode\OpNode\pWord4\pWord4.sln" /t:Restore /p:Configuration=Debug

    - name: Run unit tests
      run: dotnet test ${{ env.Test_Project_Path }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    #- name: Decode the pfx
    #  run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #    $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #    [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    #- name: Create the app package
    #  run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #  env:
    #    Appx_Bundle: Always
    #    Appx_Bundle_Platforms: x86|x64
    #    Appx_Package_Build_Mode: StoreUpload
    #    Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    #- name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: MSIX Package
    #    path: ${{ env.Wap_Project_Directory }}\AppPackages
